<project name="Worldview" default="web" basedir=".">
	
	<description> 
	Worldview build script
	</description>
	
	<property file="build.properties"/>
	<property file="${src.ant.dir}/depend.properties"/>
		
	<include>
		<fileset dir="${src.depend.dir}" includes="${build.depends}"/>
	</include>
	<include file="${src.ant.dir}/css.build.xml"/>
	<include file="${src.ant.dir}/js.build.xml"/>

	<target name="init">
	    <tstamp>
	        <format property="build.timestamp" 
	                pattern="MMMMM d, yyyy - H:mm z"
	                timezone="UTC"/>
	        <format property="build.nonce" 
	                pattern="yyyyMMddHHmmssSSS"
	                timezone="UTC"/>
	    </tstamp>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${lib.artifacts.dir}"/>
		<mkdir dir="${lib.packages.dir}"/>	
	</target>

	<target name="clean" description="Removes the build and dist directories">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${basedir}/doc/NaturalDocs/Data"/>
        <delete file="${basedir}/doc/NaturalDocs/Menu.txt"/>
	</target>
	
	<target name="distclean" depends="clean" 
		description="Cleans and also removes the lib directory">
		<delete dir="${lib.dir}"/>
	</target>
		
	<target name="deps" depends="init">
		<subant target="resolve" inheritall="true" failonerror="true">
			<fileset dir="${src.depend.dir}" includes="${build.depends}"/>
			<property name="basedir" value="${basedir}"/>
		</subant>
						
		<taskdef name="yui-compressor"
				 classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask"
			     classpath="${yui-compressor.jar.path}:${yui-compressor-ant.jar.path}"/>
		
	</target>
	
	<target name="doc" depends="deps"
		 	description="Generates documentation in the build directory">
		
		<mkdir dir="${build.doc.dir}"/>
		 
		<exec executable="perl">
		    <arg value="${natural-docs.bin}"/>
		    <arg value="-i"/>		    
		    <arg value="${src.web.js.dir}"/>
            <arg value="-i"/>           
            <arg value="doc/Topics"/>
            <arg value="-i"/>
            <arg value="test/lib"/>
		    <arg value="-o"/>
		    <arg value="HTML"/>
		    <arg value="${build.doc.dir}"/>
		    <arg value="-p"/>
		    <arg value="doc/NaturalDocs"/>
		    <arg value="-xi"/>
		    <arg value="${src.web.js.dir}/ext"/>
		    <arg value="-s"/>
		    <arg value="Default"/>
		    <arg value="Worldview"/>
		    <arg value="-img"/>
		    <arg value="doc/Images"/>
		</exec>

	</target>
		
    <target name="generate-config" description="Builds configuration file">
        <delete dir="${build.dir}/config"/>
        <mkdir dir="${build.dir}/config/"/>
            
        <copy todir="${build.dir}/config" includeEmptyDirs="true">
            <fileset dir="${basedir}/dev/generate-config/config"/>
        </copy>
            
        <exec executable="python" failonerror="true">
            <arg value="${basedir}/dev/generate-config/act2json.py"/>
            <arg value="${build.dir}/config/palettes"/>
        </exec>
        
        <exec executable="python" failonerror="true">
             <arg value="${basedir}/dev/generate-config/vrt2json.py"/>
             <arg value="--products-dir"/>
             <arg value="${build.dir}/config/products"/>
             <arg value="${build.dir}/config/palettes"/>
        </exec>
        
        <exec executable="python" failonerror="true">
            <arg value="${basedir}/dev/generate-config/generate-config.py"/>
            <arg value="--config-dir"/>
            <arg value="${build.dir}/config"/>
            <arg value="--output"/>
            <arg value="${build.dir}/config.json"/>
        </exec>
        
        <exec executable="python">
            <arg value="${basedir}/dev/generate-config/generate-config.py"/>
            <arg value="--config-dir"/>
            <arg value="${build.dir}/config"/>
            <arg value="--minify"/>
            <arg value="--output"/>
            <arg value="${build.dir}/config-min.json"/>
        </exec>
                
    </target>
    
	<target name="web" depends="init,deps,generate-config" 
	        description="Builds minified web site">
		<delete dir="${build.web.dir}"/>
		<mkdir dir="${build.web.dir}"/>
		
		<!-- Construct temporary output of the minification here -->
		<delete dir="${build.dir}/minify"/>
		<mkdir dir="${build.dir}/minify"/>

		<!-- Create a copy of all web resources. 
			 TODO: This would be easier if all files were contained under a 
			 'src' directory -->
		<copy todir="${build.web.dir}/css">
			<fileset dir="css"/>
		</copy>
		<copy todir="${build.web.dir}/data">
			<fileset dir="data"/>
		</copy>
		<copy todir="${build.web.dir}/images">
			<fileset dir="images"/>
		</copy>
        <copy todir="${build.web.dir}/html">
            <fileset dir="html"/>
        </copy>
		<copy todir="${build.web.dir}/js">
			<fileset dir="js"/>
		</copy>
		<copy todir="${build.web.dir}">
			<fileset dir="${basedir}">
				<include name="index.html"/>
				<include name=".htaccess"/>
				<include name="worldview-opensourcelibs.txt"/>
				<include name="release_notes.txt"/>
			</fileset>
		</copy>
		
		<replace file="${build.web.dir}/js/Worldview.js"
		         token="@BUILD_TIMESTAMP@"
		         value="${build.timestamp}"/>
        <replace file="${build.web.dir}/index.html"
                 token="@BUILD_NONCE@"
                 value="${build.nonce}"/>
		         
		<!-- Debug version that is not minified -->
		<delete dir="${build.web-debug.dir}"/>		
		<mkdir dir="${build.web-debug.dir}"/>
		<copy todir="${build.web-debug.dir}">
			<fileset dir="${build.web.dir}"/>
		</copy>
	
	    <!-- Configuration file -->
	    <delete file="${build.web.dir}/data/config"/>
	    <copy file="${build.dir}/config-min.json"
	          tofile="${build.web.dir}/data/config"/>
        <delete file="${build.web-debug.dir}/data/config"/>
        <copy file="${build.dir}/config.json"
              tofile="${build.web-debug.dir}/data/config"/>
              	          
		<!-- Combine all css and js files into one file -->
		<concat destfile="${build.dir}/minify/worldview.css" force="no">
			<filelist refid="css.files"/>
		</concat>
		<concat destfile="${build.dir}/minify/worldview.js" force="no">
			<filelist refid="js.files"/>
		</concat>

		<!-- Build in a separate directory. Non-minified versions need to be
		     deleted, so do that first before copying in the minified files -->
		<yui-compressor warn="false" charset="UTF-8" 
			fromdir="${build.dir}/minify" 
			todir="${build.dir}/minify">
			<include name="worldview.css"/>
			<include name="worldview.js"/>
		</yui-compressor>
		
		<delete>
			<fileset dir="${build.web.css.dir}">
				<include name="**/*.css"/>
			</fileset>
			<fileset dir="${build.web.js.dir}">
				<include name="**/*.js"/>
				<!-- Place any JavaScript concatenation exceptions here -->
				<exclude name="**/TileWorker.js"/>
			</fileset>
		</delete>
		
		<move file="${build.dir}/minify/worldview-min.css" todir="${build.web.css.dir}"/>
		<move file="${build.dir}/minify/worldview-min.js" todir="${build.web.js.dir}"/>
		
		<!-- Uncomment the references to the minified versions in 
		     the index.html file -->
		<replaceregexp 
			file="${build.web.dir}/index.html"
			match=".!--(.*worldview-min.css.*)--."
			replace="\1"/>
		<replaceregexp 
			file="${build.web.dir}/index.html"
			match=".!--(.*worldview-min.js.*)--."
			replace="\1"/>
	
		<!-- Remove references to the non-minified versions. Those lines 
		     should contain the text "js.dev" or "css.dev" -->
		<replaceregexp 
			file="${build.web.dir}/index.html"
			match="^.*css.dev.*$"
			replace=""
			byline="true"/>
		<replaceregexp 
			file="${build.web.dir}/index.html"
			match="^.*js.dev.*$"
			replace=""
			byline="true"/>
		
		<!-- Move the images to locations where it can be found in the minified 
		     form since the URLs in the CSS are relative and the location of
		     the css has changed -->
		<mkdir dir="${build.web.css.dir}/images"/>
		<move todir="${build.web.dir}/images">
		  <fileset dir="${build.web.css.dir}/ext/jquery.mobile-1.0rc2/images">
		      <include name="*"/>
		  </fileset>
		</move>
		<move todir="${build.web.css.dir}/images/jquery.dd-3.3">
          <fileset dir="${build.web.css.dir}/ext/jquery.dd-3.3/images/jquery.dd-3.3"/>
        </move>
        <move todir="${build.web.css.dir}" file="${build.web.css.dir}/ext/jcrop-0.9.10-p1/Jcrop.gif"/>
	</target>
    
    <target name="start-test-server" depends="deps">
        <exec executable="java" spawn="true">
            <arg value="-jar"/>
            <arg value="${js-test-driver.jar.path}"/>
            <arg value="--port"/>
            <arg value="${js-test-driver.port}"/>
        </exec>
        <echo message="Capture browser at http://localhost:${js-test-driver.port}/capture"/>  
    </target>
    
    <target name="test">
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="${js-test-driver.jar.path}"/>
            <arg value="--tests"/>
            <arg value="all"/>
            <arg value="--config"/>
            <arg value="test/jsTestDriver.conf"/>
        </exec>
    </target>

    <target name="test-one">
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="${js-test-driver.jar.path}"/>
            <arg value="--tests"/>
            <arg value="${test}"/>
            <arg value="--config"/>
            <arg value="test/jsTestDriver.conf"/>
        </exec>
    </target>
         
    <target name="dist" depends="clean,web,doc,artifacts"
            description="Generates distribution artifacts"/>
	
    <target name="artifacts"
            description="Generates distribution artifacts using existing build dir">	    
	<tar destfile="${dist.dir}/worldview.tar.bz2"
             basedir="${build.dir}" includes="worldview/**" 
	     compression="bzip2"/>
	<tar destfile="${dist.dir}/worldview-debug.tar.bz2"
	      basedir="${build.dir}" includes="worldview-debug/**"
	      compression="bzip2"/>
	<tar destfile="${dist.dir}/worldview-doc.tar.bz2"
	      basedir="${build.dir}" includes="worldview-doc/**" 
	      compression="bzip2"/>
    </target>
    
    <target name="rpm" depends="dist">
        <mkdir dir="${user.home}/rpmbuild/SOURCES"/>
        <copy file="${dist.dir}/worldview.tar.bz2"
	      todir="${user.home}/rpmbuild/SOURCES"/>
        <copy file="${dist.dir}/worldview-debug.tar.bz2"
	      todir="${user.home}/rpmbuild/SOURCES"/>
	<copy file="deploy/httpd.worldview.conf"
	      todir="${user.home}/rpmbuild/SOURCES"/>
	<copy file="deploy/httpd.worldview-debug.conf"
	      todir="${user.home}/rpmbuild/SOURCES"/>
	<exec executable="rpmbuild">
	    <arg value="-ba"/>
            <arg value="deploy/worldview.spec"/>
        </exec>
    </target>

</project>
