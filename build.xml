<project name="Worldview" default="web" basedir=".">
	
	<description> 
	Worldview build script
	</description>
	
	<property file="build.properties"/>
	<property file="${src.ant.dir}/depend.properties"/>
	<property file="${src.ant.dir}/deploy.properties"/>
		
	<include>
		<fileset dir="${src.depend.dir}" includes="${build.depends}"/>
	</include>
	<include file="${src.ant.dir}/css.build.xml"/>
	<include file="${src.ant.dir}/js.build.xml"/>

	<target name="init">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${lib.artifacts.dir}"/>
		<mkdir dir="${lib.packages.dir}"/>	
	</target>

	<target name="clean" description="Removes the build and dist directories">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>
	
	<target name="distclean" depends="clean" 
		description="Cleans and also removes the lib directory">
		<delete dir="${lib.dir}"/>
	</target>
		
	<target name="deps" depends="init">
		<subant target="resolve" inheritall="true" failonerror="true">
			<fileset dir="${src.depend.dir}" includes="${build.depends}"/>
			<property name="basedir" value="${basedir}"/>
		</subant>
		
		<taskdef name="jsdoc" 
			classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit" 
			classpath="${jsdoc-ant.jar.path}:${jsdoc.home.dir}/java/classes/js.jar"/>
				
		<taskdef name="yui-compressor"
				 classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask"
			     classpath="${yui-compressor.jar.path}:${yui-compressor-ant.jar.path}"/>
		
	</target>
	
	<target name="doc" depends="deps"
		 	description="Generates documentation in the build directory">
		
		<!-- Don't document the external libraries -->
		<jsdoc jsdochome="${jsdoc.home.dir}" template="jsdoc" 
			   outputdir="${build.doc.dir}" includeprivate="false"
			   includeundocumented="true">
			<fileset dir="${src.web.js.dir}">
				<include name="*.js"/>
				<include name="OpenLayers/**/*.js"/>
			</fileset>	
		</jsdoc>	
	</target>
		
	<target name="web" depends="init,deps" description="Builds minified web site">
		<delete dir="${build.web.dir}"/>
		<mkdir dir="${build.web.dir}"/>
		
		<!-- Construct temporary output of the minification here -->
		<delete dir="${build.dir}/minify"/>
		<mkdir dir="${build.dir}/minify"/>

		<!-- Create a copy of all web resources. 
			 TODO: This would be easier if all files were contained under a 
			 'src' directory -->
		<copy todir="${build.web.dir}/css">
			<fileset dir="css"/>
		</copy>
		<copy todir="${build.web.dir}/data">
			<fileset dir="data"/>
		</copy>
		<copy todir="${build.web.dir}/images">
			<fileset dir="images"/>
		</copy>
		<copy todir="${build.web.dir}/js">
			<fileset dir="js"/>
		</copy>
		<copy todir="${build.web.dir}">
			<fileset dir="${basedir}">
				<include name="index.html"/>
				<include name=".htaccess"/>
				<include name="release_notes.txt"/>
			</fileset>
		</copy>
		
		<!-- Debug version that is not minified -->
		<delete dir="${build.web-debug.dir}"/>		
		<mkdir dir="${build.web-debug.dir}"/>
		<copy todir="${build.web-debug.dir}">
			<fileset dir="${build.web.dir}"/>
		</copy>
	
		<!-- Combine all css and js files into one file -->
		<concat destfile="${build.dir}/minify/worldview.css" force="no">
			<filelist refid="css.files"/>
		</concat>
		<concat destfile="${build.dir}/minify/worldview.js" force="no">
			<filelist refid="js.files"/>
		</concat>

		<!-- Build in a separate directory. Non-minified versions need to be
		     deleted, so do that first before copying in the minified files -->
		<yui-compressor warn="false" charset="UTF-8" 
			fromdir="${build.dir}/minify" 
			todir="${build.dir}/minify">
			<include name="worldview.css"/>
			<include name="worldview.js"/>
		</yui-compressor>
		
		<delete>
			<fileset dir="${build.web.css.dir}">
				<include name="**/*.css"/>
			</fileset>
			<fileset dir="${build.web.js.dir}">
				<include name="**/*.js"/>
			</fileset>
		</delete>
		
		<move file="${build.dir}/minify/worldview-min.css" todir="${build.web.css.dir}"/>
		<move file="${build.dir}/minify/worldview-min.js" todir="${build.web.js.dir}"/>
		
		<!-- Uncomment the references to the minified versions in 
		     the index.html file -->
		<replaceregexp 
			file="${build.web.dir}/index.html"
			match=".!--(.*worldview-min.css.*)--."
			replace="\1"/>
		<replaceregexp 
			file="${build.web.dir}/index.html"
			match=".!--(.*worldview-min.js.*)--."
			replace="\1"/>
	
		<!-- Remove references to the non-minified versions. Those lines 
		     should contain the text "js.dev" or "css.dev" -->
		<replaceregexp 
			file="${build.web.dir}/index.html"
			match="^.*css.dev.*$"
			replace=""
			byline="true"/>
		<replaceregexp 
			file="${build.web.dir}/index.html"
			match="^.*js.dev.*$"
			replace=""
			byline="true"/>
		
		<!-- Move the jQuery images to a location where it can be found
		     in the minified form -->
		  <move todir="${build.web.dir}/images">
		    <fileset dir="${build.web.css.dir}/ext/jquery/images">
		      <include name="*"/>
		    </fileset>
		  </move>

	</target>
	
	<target name="test-prod" depends="web" description="Test minified js files">
        <delete dir="${build.test.dir}/min"/>
        <mkdir dir="${build.test.dir}/min"/>
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="${js-test-driver.jar.path}"/>
            <arg value="--port"/>
            <arg value="${js-test-driver.port}"/>
            <arg value="--browser"/>
            <arg value="${js-test-driver.macosx.browsers}"/>
            <arg value="--tests"/>
            <arg value="all"/>
            <arg value="--testOutput"/>
            <arg value="${build.test.dir}"/>
            <arg value="--config"/>
            <arg value="jsTestDriver-prod.conf"/>
        </exec>
	</target>
    
    <target name="test-devel" description="Test development js files">
        <delete dir="${build.test.dir}/min"/>
        <mkdir dir="${build.test.dir}/min"/>
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="${js-test-driver.jar.path}"/>
            <arg value="--port"/>
            <arg value="${js-test-driver.port}"/>
            <arg value="--browser"/>
            <arg value="${js-test-driver.macosx.browsers}"/>
            <arg value="--tests"/>
            <arg value="all"/>
            <arg value="--testOutput"/>
            <arg value="${build.test.dir}"/>
            <arg value="--config"/>
            <arg value="jsTestDriver-devel.conf"/>
        </exec>
    </target>
        
    <target name="test" depends="test-prod,test-devel"
            description="Run test suite on production and development files"/>
     
	<target name="dist" depends="clean,web,doc" 
		    description="Generates distribution artifacts">
		<tar destfile="${dist.dir}/worldview.tar.bz2"
			 basedir="${build.dir}" includes="worldview/**" 
			 compression="bzip2"/>
		<tar destfile="${dist.dir}/worldview-debug.tar.bz2"
			 basedir="${build.dir}" includes="worldview-debug/**"
			 compression="bzip2"/>
		<tar destfile="${dist.dir}/worldview-doc.tar.bz2"
			 basedir="${build.dir}" includes="worldview-doc/**" 
			 compression="bzip2"/>
	</target>

</project>