<project name="Worldview" default="web" basedir=".">

    <description>Worldview build script</description>
    
    <property file="${basedir}/etc/build.properties"/>
    <property file="${src.ant.dir}/depend.properties"/>
    
    <include>
        <fileset dir="${src.depend.dir}" includes="${build.depends}"/>
    </include>
    
    <include file="${src.ant.dir}/css.build.xml"/>
    <include file="${src.ant.dir}/js.build.xml"/>
    
    <target name="init">
        <tstamp>
            <format property="build.timestamp"
            pattern="MMMMM d, yyyy - H:mm z"
            timezone="UTC"/>
            <format property="build.nonce"
            pattern="yyyyMMddHHmmssSSS"
            timezone="UTC"/>
        </tstamp>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${lib.artifacts.dir}"/>
        <mkdir dir="${lib.packages.dir}"/>
    </target>
    
    <target name="clean" description="Removes the build and dist directories">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${basedir}/doc/NaturalDocs/Data"/>
        <delete file="${basedir}/doc/NaturalDocs/Menu.txt"/>
    </target>
    
    <target name="distclean" depends="clean"
            description="Cleans and also removes the lib directory">
        <delete dir="${lib.dir}"/>
    </target>
    
    <target name="deps" depends="init">
        <subant target="resolve" inheritall="true" failonerror="true">
            <fileset dir="${src.depend.dir}" includes="${build.depends}"/>
            <property name="basedir" value="${basedir}"/>
        </subant>
        <taskdef name="yui-compressor"
                 classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask"
                 classpath="${yui-compressor.jar.path}:${yui-compressor-ant.jar.path}"/>

    </target>
    <target name="doc" depends="deps"
            description="Generates documentation in the build directory">

        <mkdir dir="${build.doc.dir}"/>
        <exec executable="perl">
            <arg value="${natural-docs.bin}"/>
            <arg value="-i"/>
            <arg value="${src.web.js.dir}"/>
            <arg value="-i"/>
            <arg value="doc/Topics"/>
            <arg value="-i"/>
            <arg value="test/lib"/>
            <arg value="-o"/>
            <arg value="HTML"/>
            <arg value="${build.doc.dir}"/>
            <arg value="-p"/>
            <arg value="doc/NaturalDocs"/>
            <arg value="-xi"/>
            <arg value="${src.web.js.dir}/ext"/>
            <arg value="-s"/>
            <arg value="Default"/>
            <arg value="Worldview"/>
            <arg value="-img"/>
            <arg value="doc/Images"/>
        </exec>

    </target>
    <target name="generate-config" description="Builds configuration file">
        <delete dir="${build.dir}/config"/>
        <mkdir dir="${build.dir}/config/"/>
        
        <copy todir="${build.dir}/config" includeEmptyDirs="true">
            <fileset dir="${basedir}/etc/config/config"/>
        </copy>
        
        <exec executable="python" failonerror="true">
            <arg value="${basedir}/etc/config/act2json.py"/>
            <arg value="${build.dir}/config/palettes"/>
        </exec>
        
        <exec executable="python" failonerror="true">
            <arg value="${basedir}/etc/config/vrt2json.py"/>
            <arg value="--layers-dir"/>
            <arg value="${build.dir}/config/layers"/>
            <arg value="${build.dir}/config/palettes"/>
        </exec>
        
        <exec executable="python" failonerror="true">
            <arg value="${basedir}/etc/config/generate-config.py"/>
            <arg value="--config-dir"/>
            <arg value="${build.dir}/config"/>
            <arg value="--output"/>
            <arg value="${build.dir}/config.json"/>
        </exec>
        
        <exec executable="python">
            <arg value="${basedir}/etc/config/generate-config.py"/>
            <arg value="--config-dir"/>
            <arg value="${build.dir}/config"/>
            <arg value="--minify"/>
            <arg value="--output"/>
            <arg value="${build.dir}/config-min.json"/>
        </exec>
        
        <copy file="${build.dir}/config.json" tofile="${src.dir}/data/config.json"/>
                
    </target>
    <target name="web" depends="init,deps,generate-config"
            description="Builds minified web site">
        <delete dir="${build.web.dir}"/>
        <mkdir dir="${build.web.dir}"/>
        <delete dir="${build.bin.dir}"/>
        <mkdir dir="${build.bin.dir}"/>

        <!-- Construct temporary output of the minification here -->
        <delete dir="${build.dir}/minify"/>
        <mkdir dir="${build.dir}/minify"/>
        <copy todir="${build.web.dir}">
            <!-- Keep mock in for now
            <fileset dir="${src.dir}" excludes="**/mock/**"/>
            -->
            <fileset dir="${src.dir}"/>
        </copy>
        
        <replace file="${build.web.dir}/js/Worldview.js"
                 token="@BUILD_TIMESTAMP@"
                 value="${build.timestamp}"/>
        <replace token="@BUILD_NONCE@"
                 value="${build.nonce}">
            <fileset dir="${build.web.dir}" includes="*.html"/>
            <fileset dir="${build.web.dir}/pages" includes="*.html"/>
            <fileset dir="${build.web.dir}/js" includes="**/*.js"/>
        </replace>
        
        <copy todir="${build.bin.dir}">
            <fileset dir="bin"/>
        </copy>
        
        <!-- Debug version that is not minified -->
        <delete dir="${build.web-debug.dir}"/>
        <mkdir dir="${build.web-debug.dir}"/>
        <delete dir="${build.bin-debug.dir}"/>
        <mkdir dir="${build.bin-debug.dir}"/>
        <copy todir="${build.web-debug.dir}">
            <fileset dir="${build.web.dir}"/>
        </copy>
        <copy todir="${build.bin-debug.dir}">
            <fileset dir="${build.bin.dir}"/>
        </copy>

        <!-- Configuration file -->
        <delete file="${build.web.dir}/data/config"/>
        <copy file="${build.dir}/config-min.json"
              tofile="${build.web.dir}/data/config"/>
        <delete file="${build.web-debug.dir}/data/config"/>
        <copy file="${build.dir}/config.json"
              tofile="${build.web-debug.dir}/data/config"/>

        <!-- Executable bits -->
        <chmod file="${build.web.dir}/service/echo.cgi" perm="755"/>

        <!-- Combine all css and js files into one file -->
        <concat destfile="${build.dir}/minify/worldview.css" force="no">
            <filelist refid="css.files"/>
        </concat>
        <concat destfile="${build.dir}/minify/worldview.js" force="no">
            <filelist refid="js.files"/>
        </concat>

        <!-- Build in a separate directory. Non-minified versions need to be
        deleted, so do that first before copying in the minified files -->
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="${closure-compiler.jar.path}"/>
            <arg value="--warning_level"/>
            <arg value="QUIET"/>
            <arg value="--language_in"/>
            <arg value="ECMASCRIPT5"/>
            <arg value="--js"/>
            <arg value="${build.dir}/minify/worldview.js"/>
            <arg value="--js_output_file"/>
            <arg value="${build.dir}/minify/worldview-min.js"/>
            <arg value="--create_source_map"/>
            <arg value="${build.dir}/minify/worldview-min.js.map"/>
        </exec>
        
        <yui-compressor warn="false" charset="UTF-8"
                        fromdir="${build.dir}/minify"
                        todir="${build.dir}/minify">
            <include name="worldview.css"/>
        </yui-compressor>
        
        <delete>
            <fileset dir="${build.web.dir}">
                <include name="**/version-*"/>
                <include name="**/*.css"/>
                <include name="**/*.js"/>
                <!-- Place any concatenation exceptions here -->
                <exclude name="css/pages.css"/>
                <exclude name="ext/openlayers/theme/default/style.css"/>
                <exclude name="**/TileWorker.js"/>
            </fileset>
        </delete>
        
        <move file="${build.dir}/minify/worldview-min.css" todir="${build.web.dir}/css"/>
        <move file="${build.dir}/minify/worldview-min.js" todir="${build.web.dir}/js"/>

        <!-- Uncomment the references to the minified versions in
        the index.html file -->
        <replaceregexp match=".*link.prod.*!--(.*)--.*"
                       replace="\1" byline="true">
            <fileset dir="${build.web.dir}" includes="*.html"/>
            <fileset dir="${build.web.dir}/pages" includes="*.html"/>
        </replaceregexp>

        <!-- Remove references to the non-minified versions. Those lines
        should contain the text "link.dev" -->
        <replaceregexp match="^.*link.dev.*$"
                       replace="" byline="true">
            <fileset dir="${build.web.dir}" includes="*.html"/>
            <fileset dir="${build.web.dir}/pages" includes="*.html"/>
        </replaceregexp>

        <!-- OpenLayers wants to automatically use a style sheet based on the
        script location. Copy this here to make it happy -->
        <move todir="${build.web.dir}" file="${build.web.dir}/ext/openlayers/theme"/>

        <!-- Move the images to locations where it can be found in the minified
        form since the URLs in the CSS are relative and the location of
        the css has changed -->
        <move todir="${build.web.dir}/css" includeEmptyDirs="false">
            <fileset dir="${build.web.dir}/ext">
                <include name="*/**"/>
                <exclude name="*"/>
            </fileset>
            <regexpmapper from="^[^/]*/(.*)$$" to="\1" handledirsep="true"/>
        </move>
        
        <!-- Remove all empty directories left over -->
        <delete includeemptydirs="true">
            <fileset dir="${build.web.dir}">
                <and>
                    <size value="0"/>
                    <type type="dir"/>
                </and>
            </fileset>
        </delete>

    </target>
    <target name="start-test-server" depends="deps">
        <exec executable="java" spawn="true">
            <arg value="-jar"/>
            <arg value="${js-test-driver.jar.path}"/>
            <arg value="--port"/>
            <arg value="${js-test-driver.port}"/>
        </exec>
        <echo message="Capture browser at http://localhost:${js-test-driver.port}/capture"/>
    </target>
    
    <target name="test">
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="${js-test-driver.jar.path}"/>
            <arg value="--tests"/>
            <arg value="all"/>
            <arg value="--config"/>
            <arg value="test/jsTestDriver.conf"/>
        </exec>
    </target>
    
    <target name="test-one">
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="${js-test-driver.jar.path}"/>
            <arg value="--tests"/>
            <arg value="${test}"/>
            <arg value="--config"/>
            <arg value="test/jsTestDriver.conf"/>
        </exec>
    </target>
    
    <target name="dist" depends="clean,web,doc,artifacts"
            description="Generates distribution artifacts"/>
            
    <target name="artifacts"
            description="Generates distribution artifacts using existing build dir">
            
        <tar destfile="${dist.dir}/worldview.tar.bz2" compression="bzip2">
            <tarfileset dir="${build.dir}/worldview" prefix="worldview">
                <exclude name="**/service/echo.cgi"/>
                <exclude name="**/bin/eventsGeoRssParser.py"/>
            </tarfileset>
            <tarfileset dir="${build.web.dir}/service"
                        prefix="worldview/web/service" filemode="755">
                <include name="echo.cgi"/>
            </tarfileset>
            <tarfileset dir="${build.bin.dir}"
                        prefix="worldview/bin" filemode="755">
                <include name="eventsGeoRssParser.py"/>
            </tarfileset>
        </tar>
        <tar destfile="${dist.dir}/worldview-debug.tar.bz2" compression="bzip2">
            <tarfileset dir="${build.dir}/worldview-debug" prefix="worldview-debug">
                <exclude name="**/service/echo.cgi"/>
                <exclude name="**/bin/eventsGeoRssParser.py"/>
            </tarfileset>
            <tarfileset dir="${build.web-debug.dir}/service"
                        prefix="worldview-debug/web/service" filemode="755">
                <include name="echo.cgi"/>
            </tarfileset>
            <tarfileset dir="${build.bin-debug.dir}"
                        prefix="worldview-debug/bin" filemode="755">
                <include name="eventsGeoRssParser.py"/>
            </tarfileset>
        </tar>
        <tar destfile="${dist.dir}/worldview-doc.tar.bz2"
             basedir="${build.dir}" includes="worldview-doc/**"
             compression="bzip2"/>
    </target>
    
    <target name="rpm" depends="dist,rpm-build"/>
    
    <target name="rpm-build">
        <mkdir dir="${build.dir}/rpm/SOURCES"/>
        <copy file="${dist.dir}/worldview.tar.bz2"
              todir="${build.dir}/rpm/SOURCES"/>
        <copy file="${dist.dir}/worldview-debug.tar.bz2"
              todir="${build.dir}/rpm/SOURCES"/>
        <copy file="etc/deploy/httpd.worldview.conf"
              todir="${build.dir}/rpm/SOURCES"/>
        <copy file="etc/deploy/httpd.worldview-debug.conf"
              todir="${build.dir}/rpm/SOURCES"/>
        <copy file="etc/deploy/events_log.conf"
              todir="${build.dir}/rpm/SOURCES"/>
        <copy file="etc/deploy/cron.worldview"
              todir="${build.dir}/rpm/SOURCES"/>
        <copy file="etc/deploy/logrotate.worldview"
              todir="${build.dir}/rpm/SOURCES"/>
        <exec executable="rpmbuild">
            <arg value="--define"/>
            <arg value="_topdir ${basedir}/build/rpm"/>
            <arg value="-ba"/>
            <arg value="etc/deploy/worldview.spec"/>
        </exec>
        <move todir="${dist.dir}">
            <fileset dir="${build.dir}/rpm/RPMS/noarch"/>
        </move>
        <move todir="${dist.dir}">
            <fileset dir="${build.dir}/rpm/SRPMS"/>
        </move>
    </target>

</project>
