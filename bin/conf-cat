#!/usr/bin/env python
#
# NASA Worldview
#
# This code was originally developed at NASA/Goddard Space Flight Center for
# the Earth Science Data and Information System (ESDIS) project.
#
# Copyright (C) 2013 - 2014 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
 
from copy import deepcopy
from optparse import OptionParser
import os
import sys
import json

prog = os.path.basename(__file__)
base_dir = os.path.join(os.path.dirname(__file__), "..")
version = "1.0.0"
help_description = """\
Concatenates all configuration items a directory into one configuration file. 
"""

# dict_merge from
# http://blog.impressiver.com/post/31434674390/deep-merge-multiple-python-dicts
def dict_merge(target, *args):
  # Merge multiple dicts
  if len(args) > 1:
    for obj in args:
      dict_merge(target, obj)
    return target
 
  # Recursively merge dicts and set non-dict values
  obj = args[0]
  if not isinstance(obj, dict):
    return obj
  for k, v in obj.iteritems():
    if k in target and isinstance(target[k], dict):
      dict_merge(target[k], v)
    else:
      target[k] = deepcopy(v)
  return target


# MAIN
input_dir = os.path.join(base_dir, "conf", "web")

parser = OptionParser(usage="Usage: %s [options]" % prog,
                      version="%s version %s" % (prog, version),
                      epilog=help_description)
parser.add_option("-i", "--input-dir", default=input_dir,
                  help="Use this as the input directory instead of " +
                  input_dir)
parser.add_option("-m", "--minify", action="store_true",
                  help="minify the output instead of pretty printing")

(options, args) = parser.parse_args()

input_dir = options.input_dir

conf = {}
for root, dirs, files in os.walk(input_dir):
    for file in files:
        try:
            with open(os.path.join(root, file)) as fp:
                data = json.load(fp)
            dict_merge(conf, data)
        except Exception as e:
            sys.stderr.write("ERROR: %s: %s\n" % 
                             (os.path.join(root, file), str(e)))   
            sys.exit(1)      
                    
json_options = {}
if not options.minify:
    json_options["indent"] = 4
    json_options["separators"] = (',', ': ')

print json.dumps(conf, **json_options)




