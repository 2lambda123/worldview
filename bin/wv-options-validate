#!/usr/bin/env python
#
# NASA Worldview
#
# This code was originally developed at NASA/Goddard Space Flight Center for
# the Earth Science Data and Information System (ESDIS) project.
#
# Copyright (C) 2013 - 2014 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#

from datetime import datetime, date, timedelta
import json
from optparse import OptionParser
import os
import sys

prog = os.path.basename(__file__)
base_dir = os.path.join(os.path.dirname(__file__), "..")
version = "1.0.0"
help_description = """\
Validates and corrects the configuration files.
"""

parser = OptionParser(usage="Usage: %s <config_json> <config_dir>" % prog,
                      version="%s version %s" % (prog, version),
                      epilog=help_description)
(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error("Invalid number of arguments")

options_file = args[0]
config_dir = args[1]

error_count = 0
warning_count = 0

def error(message):
    global error_count
    sys.stderr.write("%s: ERROR: %s\n" % (prog, message))
    error_count += 1

def warn(message):
    global warning_count
    sys.stderr.write("%s:  WARN: %s\n" % (prog, message))
    warning_count += 1


main_config_file = os.path.join(config_dir, "wv.json")
with open(main_config_file) as fp:
    wv = json.load(fp)
with open(options_file) as fp:
    opt = json.load(fp)

for layer_id in wv["layers"].keys():
    layer = wv["layers"][layer_id]
    if len(layer["projections"]) == 0:
        warn("[%s] No projections defined or not found in GC documents" %
            layer_id)
    if layer_id not in wv["layerOrder"]:
        if "warnOnUnexpectedLayer" in opt:
            warn("[%s] Unexpected layer" % layer_id)
        del wv["layers"][layer_id]
    if "palette" in layer:
        palette_id = layer["palette"]["id"]
        if not os.path.exists(os.path.join(config_dir, "palettes",
                palette_id + ".json")):
            error("[%s] Unknown palette: %s" % (layer_id, palette_id))

for layer_id in wv["layerOrder"]:
    if layer_id not in wv["layers"]:
        error("[%s] In layer order but no definition" % layer_id)

print "%s: %d error(s), %d warning(s)" % (prog, error_count, warning_count)

if error_count > 0:
    sys.exit(1)

json_options = {}
json_options["indent"] = 4
json_options["separators"] = (',', ': ')

with open(main_config_file, "w") as fp:
    json.dump(wv, fp)
