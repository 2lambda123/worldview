#!/usr/bin/env python
#
# NASA Worldview
#
# This code was originally developed at NASA/Goddard Space Flight Center for
# the Earth Science Data and Information System (ESDIS) project.
#
# Copyright (C) 2013 - 2014 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#

from datetime import datetime, date, timedelta
import json
from optparse import OptionParser
import os
import sys
import xmltodict

SKIP_LAYERS = [
    "Sea_Surface_Temp_Microwave",
    "Sea_Surface_Temp_Blended",
    "arctic_graticule_3413_reverb",
    "blue_marble_arctic",
    "OMI_SO2_Planetary_Boundary_Layer",
]

prog = os.path.basename(__file__)
base_dir = os.path.join(os.path.dirname(__file__), "..")
version = "2.0.0"
help_description = """\
Extracts configuration information from a WMTS GetCapabilities file.
"""

parser = OptionParser(usage="Usage: %s <config_file> <input_dir> <output_dir>" % prog,
                      version="%s version %s" % (prog, version),
                      epilog=help_description)
(options, args) = parser.parse_args()

if len(args) != 3:
    parser.error("Invalid number of arguments")

config_file = args[0]
input_dir = args[1]
output_dir = args[2]

with open(config_file) as fp:
    config = json.load(fp)

if not "wv-options-wmts" in config:
    sys.exit(0)

if not os.path.exists(output_dir):
    os.makedirs(output_dir)

entries = config["wv-options-wmts"]
skip = []
if "skip" in config:
    skip = config["skip"]

for entry in entries:
    wv = {
        "layers": {},
        "sources": {}
    }
    wv_matrix_sets = {}
    wv["sources"][entry["source"]] = {
        "matrixSets": wv_matrix_sets
    }

    input_file = os.path.join(input_dir, entry["from"])
    with open(input_file) as fp:
        xml = fp.read()
    gc = xmltodict.parse(xml)

    gc_contents = gc["Capabilities"]["Contents"]
    wv_layers = wv["layers"]

    for gc_layer in gc_contents["Layer"]:
        id = gc_layer["ows:Identifier"]
        if id in skip:
            print "%s: Skipping layer: %s" % (prog, id)
            continue
        wv_layers[id] = {}
        wv_layer = wv_layers[id]

        wv_layer["id"] = id
        wv_layer["type"] = "wmts"
        wv_layer["format"] = gc_layer["Format"]

        # Extract start and end dates
        if "Dimension" in gc_layer:
            dimension = gc_layer["Dimension"]
            if dimension["ows:Identifier"] == "time":
                try:
                    wv_layer["period"] = "daily"
                    values = dimension["Value"].split("/")

                    # Layer is still actively being produced if the end date
                    # greater than yesterday
                    end_date = datetime.strptime(values[1], "%Y-%m-%d")
                    yesterday = datetime.now() - timedelta(days=1)
                    wv_layer["startDate"] = values[0]
                    if end_date < yesterday:
                        wv_layer["endDate"] = values[1]
                except ValueError:
                    raise Exception("Invalid time: {0}".format(values))

        # Extract matrix set
        matrixSet = gc_layer["TileMatrixSetLink"]["TileMatrixSet"]
        wv_layer["projections"] = {
            entry["projection"]: {
                "source": entry["source"],
                "matrixSet": matrixSet
            }
        }

    for gc_matrix_set in gc_contents["TileMatrixSet"]:
        id = gc_matrix_set["ows:Identifier"]
        zoom_levels = len(gc_matrix_set["TileMatrix"])
        resolutions = []
        max_resolution = entry["maxResolution"]
        for zoom in xrange(0, zoom_levels):
            resolutions = resolutions + [max_resolution / (2 ** zoom)]
        wv_matrix_sets[id] = {
            "id": id,
            "maxResolution": max_resolution,
            "resolutions": resolutions,
            "tileSize": [
                gc_matrix_set["TileMatrix"][0]["TileWidth"],
                gc_matrix_set["TileMatrix"][0]["TileHeight"]
            ]
        }

    json_options = {}
    json_options["indent"] = 4
    json_options["separators"] = (',', ': ')

    output_file = os.path.join(output_dir, entry["to"])
    with open(output_file, "w") as fp:
        json.dump(wv, fp, **json_options)
