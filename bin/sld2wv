#!/usr/bin/env python
#
# NASA Worldview
#
# This code was originally developed at NASA/Goddard Space Flight Center for
# the Earth Science Data and Information System (ESDIS) project.
#
# Copyright (C) 2013 - 2014 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#

import json
from optparse import OptionParser
import os 
import xmltodict

prog = os.path.basename(__file__)
base_dir = os.path.join(os.path.dirname(__file__), "..")
version = "1.0.0"
help_description = """\
Convert an SLD document to a JSON palette suitable for Worldview.
"""

parser = OptionParser(usage="Usage: %s [options] sld_file output_dir" % prog,
                      version="%s version %s" % (prog, version),
                      epilog=help_description)
parser.add_option("-o", "--output-dir", default=".", 
                  help="Use this for output instead of the current directory")
(options, args) = parser.parse_args()
if len(args) < 0:
    parser.error("Missing required arguments")
output_dir = options.output_dir

def to_list(v):
    if not isinstance(v, list):
        v = [v]
    return v

for input_file in args:
    #print input_file
    with open(input_file) as fp:
        xml = fp.read()
    sld = xmltodict.parse(xml)
    
    layers = to_list(sld["StyledLayerDescriptor"]["NamedLayer"])
    for layer in layers:
        name = layer["Name"]
        rule = layer["UserStyle"]["FeatureTypeStyle"]["Rule"]
        symbolizers = to_list(rule["RasterSymbolizer"])
        colors = []
        values = []
        for sym in symbolizers:
            if "Opacity" in sym and float(sym["Opacity"]) == 0:
                break
            if len(colors) > 0:
                raise "Multiple symbolizers"
            for entry in to_list(sym["ColorMap"]["ColorMapEntry"]):
                opacity = 1
                if "@opacity" in entry:
                    opacity = float(entry["@opacity"])
                if opacity == 0:
                    continue
                colors += [entry["@color"][1:7]]
                values += [entry.get("@label", "")]
        palette = {
            "id": name,
            "colors": colors,
            "values": values 
        }
        with open(os.path.join(output_dir, name + ".json"), "w") as fp:
            json.dump(palette, fp)

        


